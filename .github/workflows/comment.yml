name: npm install runner

on:
  issue_comment:
    types: [created]
    
jobs:
  start:
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: write
    outputs:
      interpretation: ${{ fromJSON(steps.interpret.outputs.result).interpretation }}
      build_sha: ${{ fromJSON(steps.interpret.outputs.result).build_sha }}
    steps:
      - name: Debug
        uses: actions/github-script@v4
        with:
          script: console.log(context);

      - name: Debug2
        uses: actions/github-script@v4
        with:
          script: console.log(context.payload.issue.pull_request);

      - name: Interpret comment
        id: interpret
        uses: actions/github-script@v4
        with:
          script: |
            // Make sure we're being spoken to
            if (context.payload.action !== 'created' || !('pull_request' in context.payload.issue) || context.payload.comment.body !== '/hi') {
                console.log('Not our command.');
                return;
            }
             
            // Check the permissions of the sender 
            const permission_response = await github.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.sender.login
            });
            const permission = permission_response.data.permission;
            if (permission !== 'admin' && permission !== 'write') {
                await github.reactions.createForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: context.payload.comment.id,
                    content: 'confused'
                });
                await github.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: '> /hi\n\nThis command can only be used by users with write access to the repository.'
                });                    
                core.setFailed(`User ${context.payload.sender.login} has insufficient permissions`);
                return;
            }
            
            // Figure out what we should be building, exactly.
            const pull_response = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            console.log(pull_response);
            const head_sha = pull_response.data.head.sha;
            
            // Indicate that we're about to start work
            await github.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'rocket'
            });
            
            return { interpretation: 'request-valid', build_sha: head_sha };
            
  build:
    needs: start
    if: ${{ needs.start.outputs.interpretation == 'request-valid' }}
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: none
    env:
      GIT_DIR: git-dir.git
      HEAD_SHA: ${{ needs.start.outputs.head_sha }}
      BASE_SHA: ${{ github.sha }}
    steps:
      - name: Fetch relevant commits
        run: |
            set -ux
            git init -b main
            git remote add origin "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
            git fetch origin "${BASE_SHA}" "${HEAD_SHA}"
            
      - name: Ensure PR is up to date with package.json on the base branch
        run: git log --exit-code "${BASE_SHA}" --not "${HEAD_SHA}" -- package.json
        
      - name: Extract package.json
        run: git cat-file blob "${HEAD_SHA}:package.json" > package.json

      - name: npm install
        run: |
          set -ux

          exec >&2 # close workflow command channel

          container="$(docker create -u node -w /home/node node:14 npm install --ignore-scripts)"
          docker cp package.json "${container}:/home/node/package.json"
          docker start -a "${container}" 2>&1 | tee npm-install.log
          docker cp "${container}:/home/node/package.json" npm-package.json
          docker cp "${container}:/home/node/package-lock.json" package-lock.json
          docker cp "${container}:/home/node/node_modules" - > node_modules.tar
          docker rm -f "${container}"
          
      - name: Ensure no changes to package.json
        run: diff -u package.json npm-package.json

      - uses: actions/upload-artifact@v2
        name: Create artifact
        with:
          path: |
            npm-install.log
            package.json
            package-lock.json
            node_modules.tar
          retention-days: 1
        
  upload:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-20.04
    environment: node-cache upload
    permissions:
      pull-requests: write
    steps:
      - name: Debug
        uses: actions/github-script@v4
        with:
          script: console.log(${{ toJSON(needs) }});
        
      - name: Nothing
        run: false

  fail:
    needs: [start, build, upload]
    if: ${{ failure() && needs.build.result != 'skipped' }}
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: write
    steps:
      - name: Write failure comment
        uses: actions/github-script@v4
        with:
          script: |
            const { repo: { owner, repo } } = context;
            await github.reactions.createForIssueComment({
                owner, repo,
                comment_id: context.payload.comment.id,
                content: '-1'
            });
            await github.issues.createComment({
                owner, repo,
                issue_number: context.issue.number,
                body: `> /hi\n\nThe workflow failed.  See here for more information: https://github.com/${owner}/${repo}/actions/runs/${context.runId}`
            });                    
